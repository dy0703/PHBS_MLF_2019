jpeg(file  =  "Fig1 改革组和控制组的改革前wageindex比较图.jpg")
ggpaired(comp_1, x = "Condition", y = "wageindex",
color = "Condition", line.color = "gray", line.size = 0.4,
palette = "lancet")+
stat_compare_means(paired = TRUE)
library(readxl)
library(foreign)
#导入数据
mydata = read.csv("【附件二】simulated_data.csv",as.is = TRUE)
mydata$treat = 0
mydata [1:20,]
mydata = mydata[complete.cases(mydata),]  #删除有缺失值的行
dim(mydata)
#生成新变量treat，改革组所有的年份都取1
for (i in 1:length(mydata$X)){
if (mydata$treatment[i] == 1){
a = mydata$id[i]
mydata$treat[mydata$id == a] = 1
}
}
id_treat = mydata$id[mydata$treatment == 1] #实验组ID
id_all = unique(mydata$id) #提取所有ID
print('所有ID数：')
length(id_all)
print('实验组ID数：')
length(id_treat)
id_control = setdiff(id_all,id_treat) #控制组ID
print('控制组ID数：')
length(id_control)
#看a是否等于实验组数，以确定每个实验组都只改革了一次
a = 0
for (i in 1:length(mydata$X)){
if (mydata[i,5]==1){
a = a+1
}
}
a
group_treat = matrix(ncol = 9,nrow = 1)
for (i in 1:length(id_treat)){
a = subset(mydata,mydata$id==id_treat[i])
b = matrix(a[1,],nrow = 1)
group_treat = rbind(group_treat,b)
}
group_treat = group_treat[-1,]
colnames(group_treat) = c('X','id','year','Dept','treatment',
'profit','size','wageindex','treat')
dim(group_treat)
group_control = matrix(ncol = 9,nrow = 1)
for (i in 1:length(id_control)){
a = subset(mydata,mydata$id == id_control[i])
b = matrix(a[1,],nrow = 1)
group_control = rbind(group_control,b)
}
group_control = group_control[-1,]
colnames(group_control) = c('X','id','year','Dept','treatment',
'profit','size','wageindex','treat')
dim(group_control)
#采用z-score方法标准化 profit, size,  wageindx
group_total=rbind(group_control,group_treat)
group_total_norm=group_total
col_rep=c('profit', 'size', 'wageindex')
for (i in col_rep){
norm_ser = (unlist(group_total[,i]) -  mean(unlist(group_total[,i]))) / sd(unlist(group_total[,i]))
#norm_ser = (unlist(group_total[,i]) - min(unlist(group_total[,i]))) / (max(unlist(group_total[,i])) - min(unlist(group_total[,i])))
group_total_norm[,i] = as.list(norm_ser)
}
group_control_norm = group_total_norm[1:nrow(group_control),]
group_treat_norm = group_total_norm[(nrow(group_control)+1):nrow(group_total),]
#定义距离函数
euclid_dist=function(group1, group2){
dist12 =        sqrt((1 - identical(group1$Dept,group2$Dept)) +
(group1$profit - group2$profit)^2 +
(group1$size - group2$size)^2 +
(group1$wageindex - group2$wageindex)^2)
return(dist12)
}
#构建实验组和控制组之间的距离矩阵
dist_mat = matrix(0,nrow = nrow(group_control_norm), ncol = nrow(group_treat_norm),
dimnames = list(group_control_norm[,"id"], group_treat_norm[,"id"]))
for (col_i in 1:ncol(dist_mat)){
for (row_i in 1:nrow(dist_mat)){
dist_mat[row_i,col_i] = euclid_dist(group_control_norm[row_i,], group_treat_norm[col_i,])
}
}
#构建相似pair
dist_mat_dynam = dist_mat
pair_mat = matrix(0,nrow = ncol(dist_mat), ncol = 7)
colnames(pair_mat) = c("treat_id","control_id","distance", "treat_before_wageindex",  "treat_after_wageindex",  "control_before_wageindex",  "control_after_wageindex")
for (i in 1:(ncol(dist_mat)-1)){
loc_oi = which(dist_mat_dynam == min(dist_mat_dynam), arr.ind = TRUE)
pair_mat[i,1] = colnames(dist_mat_dynam)[loc_oi[2]]
pair_mat[i,2] = rownames(dist_mat_dynam)[loc_oi[1]]
pair_mat[i,3] = min(dist_mat_dynam)
dist_mat_dynam = dist_mat_dynam[-loc_oi[1],-loc_oi[2]]
}
pair_mat[ncol(dist_mat),1] = setdiff(colnames(dist_mat), pair_mat[1:(ncol(dist_mat)-1),1])
pair_mat[ncol(dist_mat),2] = names(which(dist_mat_dynam == min(dist_mat_dynam)))
pair_mat[ncol(dist_mat),3] = min(dist_mat_dynam)
print(pair_mat[1:10,])
for (i in 1:nrow(pair_mat)){
treat_set = subset(mydata, mydata$id == pair_mat[i,1])
control_set = subset(mydata, mydata$id == pair_mat[i,2])
start_year = treat_set$year[1]
end_year = treat_set$year[length(treat_set$year)]
revo_year = treat_set$year[treat_set$treatment == 1]
#如果实验组改革开始年份不包含在对照组数据年份里，则不填入数据
if (length(which(control_set$year == revo_year)) == 0){}
else {
#每组样本分成改革前后改革后
index_treat_before = which(treat_set$year == start_year):(which(treat_set$year == revo_year) - 1)
index_treat_after = which(treat_set$year == revo_year):which(treat_set$year == end_year)
index_control_before = which(control_set$year == max(c(min(control_set$year),start_year))):(which(control_set$year == revo_year) - 1)
index_control_after = which(control_set$year == revo_year):which(control_set$year == min(c(max(control_set$year),end_year)))
#在Pair_mat中填入改革前后的平均wageindex
pair_mat[i,"treat_before_wageindex"] = mean(treat_set$wageindex[index_treat_before])
pair_mat[i,"treat_after_wageindex"] = mean(treat_set$wageindex[index_treat_after])
pair_mat[i,"control_before_wageindex"] = mean(control_set$wageindex[index_control_before])
pair_mat[i,"control_after_wageindex"] = mean(control_set$wageindex[index_control_after])
}
}
for (i in 1:nrow(pair_mat)){
treat_set = subset(mydata, mydata$id == pair_mat[i,1])
control_set = subset(mydata, mydata$id == pair_mat[i,2])
start_year = treat_set$year[1]
end_year = treat_set$year[length(treat_set$year)]
revo_year = treat_set$year[treat_set$treatment == 1]
#如果实验组改革开始年份不包含在对照组数据年份里，则不填入数据
if (length(which(control_set$year == revo_year)) == 0){}
else {
#每组样本分成改革前后改革后
index_treat_before = which(treat_set$year == start_year):(which(treat_set$year == revo_year) - 1)
index_treat_after = which(treat_set$year == revo_year):which(treat_set$year == end_year)
index_control_before = which(control_set$year == max(c(min(control_set$year),start_year))):(which(control_set$year == revo_year) - 1)
index_control_after = which(control_set$year == revo_year):which(control_set$year == min(c(max(control_set$year),end_year)))
#在Pair_mat中填入改革前后的平均wageindex
pair_mat[i,"treat_before_wageindex"] = mean(treat_set$wageindex[index_treat_before])
pair_mat[i,"treat_after_wageindex"] = mean(treat_set$wageindex[index_treat_after])
pair_mat[i,"control_before_wageindex"] = mean(control_set$wageindex[index_control_before])
pair_mat[i,"control_after_wageindex"] = mean(control_set$wageindex[index_control_after])
}
}
#如果实验组改革开始年份不包含在对照组数据年份里，则删除这一对pair
pair_mat = pair_mat[-which(pair_mat[,"treat_before_wageindex"] == 0),]
print(pair_mat[1:10,])
#构建用于作图和分析的dataframe
library(ggpubr)
n_group = length(as.numeric(pair_mat[,"treat_before_wageindex"]))
#比较实验组和控制组改革前的wageindex
comp_1 =  data.frame("wageindex" = c(as.numeric(pair_mat[,"treat_before_wageindex"]),as.numeric(pair_mat[,"control_before_wageindex"])), "Condition" = c(rep('Pre_treat',n_group), rep('Pre_control',n_group)))
comp_1$Condition = factor(comp_1$Condition, levels = c("Pre_treat", "Pre_control"))
#比较实验组和控制组改革后的wageindex
comp_2 =  data.frame("wageindex" = c(as.numeric(pair_mat[,"treat_after_wageindex"]),as.numeric(pair_mat[,"control_after_wageindex"])), "Condition" = c(rep('Post_treat',n_group), rep('Post_control',n_group)))
comp_2$Condition = factor(comp_2$Condition, levels = c("Post_treat", "Post_control"))
#比较控制组改革前后的wageindex
comp_3 =  data.frame("wageindex" = c(as.numeric(pair_mat[,"control_before_wageindex"]),as.numeric(pair_mat[,"control_after_wageindex"])), "Condition" = c(rep('Pre_control',n_group), rep('Post_control',n_group)))
comp_3$Condition = factor(comp_3$Condition, levels = c("Pre_control", "Post_control"))
#比较控制组改革前后的wageindex
comp_4 =  data.frame("wageindex" = c(as.numeric(pair_mat[,"treat_before_wageindex"]),as.numeric(pair_mat[,"treat_after_wageindex"])), "Condition" = c(rep('Pre_treat',n_group), rep('Post_treat',n_group)))
comp_4$Condition = factor(comp_4$Condition, levels = c("Pre_treat", "Post_treat"))
#比较实验组和控制组的改革前后wageindex difference
comp_5 =  data.frame("wageindex_difference" = c(as.numeric(pair_mat[,"treat_after_wageindex"]) - as.numeric(pair_mat[,"treat_before_wageindex"]),as.numeric(pair_mat[,"control_after_wageindex"]) - as.numeric(pair_mat[,"control_before_wageindex"])), "Condition" = c(rep('Treat_difference',n_group), rep('Control_difference',n_group)))
comp_5$Condition = factor(comp_5$Condition, levels = c("Treat_difference", "Control_difference"))
jpeg(file  =  "Fig1 改革组和控制组的改革前wageindex比较图.jpg")
ggpaired(comp_1, x = "Condition", y = "wageindex",
color = "Condition", line.color = "gray", line.size = 0.4,
palette = "lancet")+
stat_compare_means(paired = TRUE)
dev.off()
jpeg(file  =  "Fig2 改革组和控制组的改革后wageindex比较图.jpg")
ggpaired(comp_2, x = "Condition", y = "wageindex",
color = "Condition", line.color = "gray", line.size = 0.4,
palette = "lancet")+
stat_compare_means(paired = TRUE)
dev.off()
jpeg(file  =  "Fig3 控制组改革前和改革后wageindex比较图.jpg")
ggpaired(comp_3, x = "Condition", y = "wageindex",
color = "Condition", line.color = "gray", line.size = 0.4,
palette = "lancet")+
stat_compare_means(paired = TRUE)
jpeg(file  =  "Fig4 改革组的改革前和改革后wageindex比较图.jpg")
ggpaired(comp_4, x = "Condition", y = "wageindex",
color = "Condition", line.color = "gray", line.size = 0.4,
palette = "lancet")+
stat_compare_means(paired = TRUE)
jpeg(file  =  "Fig5 改革组和控制组改革后wageindex变化率比较图.jpg")
ggpaired(comp_5, x = "Condition", y = "wageindex_difference",
color = "Condition", line.color = "gray", line.size = 0.4,
palette = "lancet")+
stat_compare_means(paired = TRUE)
